# This file is part of ModernCRecord

# ModernCRecord is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# ModernCRecord is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Extractor_Markup.  If not, see <http://www.gnu.org/licenses/>.

# see link below for make file dependency magic
#
# http://bruno.defraine.net/techtips/makefile-auto-dependencies-with-gcc/
#
MAKE=gmake

BOOSTDIR := /extra/boost/boost-1.80_gcc-12
GCCDIR := /extra/gcc/gcc-12
GTESTDIR := /usr/local/include
CPP := $(GCCDIR)/bin/g++
GCC := $(GCCDIR)/bin/gcc

# If no configuration is specified, "Debug" will be used
ifndef "CFG"
	CFG := Debug
endif

#	common definitions

OUTFILE := libCRecord.a

CFG_INC := -I${HOME}/projects/ModernCRecord/CRecord/src \
	-I${HOME}/projects/ModernCRecord/common_utilities/include \
	-I${HOME}/projects/ModernCRecord/CPP_Antlr_Record_Desc \
	-I$(GTESTDIR) \
	-I$(BOOSTDIR) \
	-I/usr/include/antlr4-runtime

# RPATH_LIB := -Wl,-rpath,$(GCCDIR)/lib64 -Wl,-rpath,$(BOOSTDIR)/lib -Wl,-rpath,/usr/local/lib

# SDIR1 := .
# SRCS1 := $(SDIR1)/Unit_Test.cpp

SDIR2 := ../CRecord/src
SRCS2 := $(SDIR2)/CRecord.cpp \
	$(SDIR2)/CField.cpp \
	$(SDIR2)/CRecordDescParser.cpp \
	$(SDIR2)/CRecordDescVisitor.cpp \
	$(SDIR2)/CFixedRecord.cpp \
	$(SDIR2)/CVariableRecord.cpp 

SDIR3 := ../CPP_Antlr_Record_Desc
SRCS3 := $(SDIR3)/CPP_Record_DescLexer.cpp \
		 $(SDIR3)/CPP_Record_DescParser.cpp \
		 $(SDIR3)/CPP_Record_DescVisitor.cpp \
		 $(SDIR3)/CPP_Record_DescBaseVisitor.cpp
# 		 $(SDIR3)/decContext.c

SDIR3a := ../common_utilities/src
SRCS3a := $(SDIR3a)/utilities.cpp

SRCS := $(SRCS2) $(SRCS3) $(SRCS3a) # $(SRCS4)

VPATH := $(SDIR2):$(SDIR3):$(SDIR3a)#:$(SDIR4)

#
# Configuration: Debug
#
ifeq "$(CFG)" "Debug"

OUTDIR := Debug_unit

# CFG_LIB := -L/usr/local/lib \
# 		-lgtest -lgtest_main \
# 		-ldate-tz \
# 		-L/usr/lib \
# 		-lfmt \
# 		-lspdlog \
# 		-lpthread \
# 		-lantlr4-runtime \
# 		-ldl -lutil -lm -lm \
# 		-L$(GCCDIR)/lib64

# OBJS1=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS1)))))
OBJS2=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS2)))))
OBJS3=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS3)))))
OBJS3a=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS3a)))))

OBJS=$(OBJS2) $(OBJS3) $(OBJS3a) #$(OBJS4)

DEPS=$(OBJS:.o=.d)

COMPILE=$(CPP) -c  -x c++  -O0  -g3 -std=c++2b -DBOOST_ENABLE_ASSERT_HANDLER -D_DEBUG -DSPDLOG_FMT_EXTERNAL -DBOOST_REGEX_STANDALONE -DUSE_OS_TZDB  -fPIC -o $@ $(CFG_INC) $< -march=native -MMD -MP

LINK=ar -rs  "$(OUTFILE)" $(OBJS)

endif #	DEBUG configuration

# Build rules
all: $(OUTFILE)

$(OUTDIR)/%.o : %.cpp
	$(COMPILE)

$(OUTFILE): $(OUTDIR) $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS3a) # $(OBJS4)
	$(LINK)

-include $(DEPS)

$(OUTDIR):
	mkdir -p "$(OUTDIR)"

# Rebuild this project
rebuild: cleanall all

# Clean this project
clean:
	rm -f $(OUTFILE)
	rm -f $(OBJS)
	rm -f $(OUTDIR)/*.P
	rm -f $(OUTDIR)/*.d
	rm -f $(OUTDIR)/*.o

# Clean this project and all dependencies
cleanall: clean
